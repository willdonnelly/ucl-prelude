UCL PRELUDE
===========

A small library of pure scheme functions that came in handy during the
development of the other UCL libraries.

Functions
---------

CURRY f . xs
 Partially applies the function F with the arguments XS

COMPOSE . fs
 Compose a list of functions like (lambda (x) (f1 (f2 .. (fN x))))

NUB xs
 Remove duplicate elements from XS

NUB-BY eq xs
 Remove duplicate elements from XS using predicate EQ

SHOW obj
 Return a string containing OBJ as printed by the DISPLAY function

TEMPLATE str . vals
 Return STR with every occurrence of '%' replaced with the appropriate
 value

INTERSPERSE e l
 Return the list L with E between each element

BREAK-ON p xs
 Divide a list XS into multiple lists divided by elements for which P is
 true. Those elements are removed entirely

BREAK-STRING chr str
 Break STR into multiple substrings separated by CHR

FOR
 Syntax like LET, but binds each element of a list in turn, rather than a
 single value

RANGE a b
 Return the numeric range [A, B)

WITH-WARNING msg ret thunk
 Execute THUNK, emitting the message MSG if an error occurs, and
 continuing from the exception with value RET

WITH-ERROR
 Execute THUNK, emitting the message MSG in case of error before aborting
 the program

GET-DATA port
 Read a sequence of scheme values from PORT

PUT-DATA port data
 Write a sequence of scheme values to PORT separated by newlines

READ-FILE-DATA
 Like GET-DATA, but for a file

WRITE-FILE-DATA
 Like PUT-DATA, but for a file

WITH-FILE-DATA file proc
 Read the contents of FILE, pass it to PROC, and write the return value
 back to FILE. In case of error, FILE should be unmodified.
